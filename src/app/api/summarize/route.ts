/* Summarize endpoint: accepts a file and returns Markdown */

import { NextResponse } from 'next/server'

// Keep server-side validation aligned with client
type ValidMime =
  | 'application/pdf'
  | 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'

const max_bytes = 10 * 1024 * 1024 // 10 MB
const acceptedMimes: ValidMime[] = [
  'application/pdf',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
]

export async function POST(req: Request) {
  try {
    const form = await req.formData()
    const file = form.get('file') as File | null

    if (!file) {
      return NextResponse.json({ error: 'No file found in request.' }, { status: 400 })
    }

    // Validate type (MIME) with filename fallback (some environments don’t set type).
    const type = file.type as ValidMime | ''
    const name = file && file.name != null ? String(file.name) : 'uploaded-file'
    const lower = name.toLowerCase()
    const looksPdf = lower.endsWith('.pdf')
    const looksDocx = lower.endsWith('.docx')

    const mimeOk = acceptedMimes.includes(type as ValidMime) || looksPdf || looksDocx

    if (!mimeOk) {
      return NextResponse.json(
        { error: 'Only PDF (.pdf) or DOCX (.docx) are allowed.' },
        { status: 400 },
      )
    }

    if (file.size > max_bytes) {
      return NextResponse.json({ error: 'File is larger than 10 MB.' }, { status: 400 })
    }

    // We do NOT read/parse the file yet; just echo some metadata and return mock content.
    const sizeMB = (file.size / (1024 * 1024)).toFixed(2)
    const now = new Date()
      .toISOString()
      .slice(0, 19)
      .replace('T', ' ')

    // Mock Markdown output (matches your final structure)
    const markdown = `# Executive Summary
This is a **mock summary** generated by the API for \`${name}\` (${sizeMB} MB) at ${now}.

# Key Insights
- Placeholder insight 1
- Placeholder insight 2
- Placeholder insight 3

# Risks
- Placeholder risk 1
- Placeholder risk 2

# Action Items
- [ ] Placeholder action 1
- [ ] Placeholder action 2

> Note: Real parsing not implemented yet. This validates the UI ↔ API flow.`

    return NextResponse.json({ markdown }, { status: 200 })
  } catch (err) {
    console.error('summarize error:', err)
    return NextResponse.json({ error: 'Unexpected server error.' }, { status: 500 })
  }
}
